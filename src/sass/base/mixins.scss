@use 'sass:math';

//Подключение шрифта
// @mixin font($font_name, $file_name, $weight, $style) {
// 	@font-face {
// 		font-family: $font_name;
// 		font-display: swap;
// 		src: url("../fonts/#{$file_name}.woff2") format("woff2"), url("../fonts/#{$file_name}.woff") format("woff");
// 		font-weight: #{$weight};
// 		font-style: #{$style};
// 	}
// }
// @include font("font_name", "file_name", 400, normal);

//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}

//REM
@function rem($px) {
	$result: math.div($px, 16) + rem;
	@return $result;
}

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current) + em;
	@return $result;
}

//Currency
@mixin currency($sym) {
	&::after {
		content: '#{$sym}';
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue(
	$property,
	$startSize,
	$minSize,
	$widthFrom,
	$widthTo,
	$maxWidth,
	$containerWidth,
	$minWidth,
	$maxWidthContainer,
	$keepSize: 0
) {
	@if ($startSize ==0) {
		$startSize: 0.000001;
	}

	@if ($minSize ==0) {
		$minSize: 0.000001;
	}

	// Для calc()
	$addSize: math.div($startSize - $minSize, 16);

	// Подмена $widthFrom при условии
	@if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
		$widthFrom: $maxWidth;
	}

	// Брейкпоинты в em
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула clamp
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;

	@if ($yIntersection ==0) {
		$yIntersection: 0.000001;
	}

	$flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

	// Значение свойства по умолчанию
	$propertyValue: clamp(#{rem($minSize)}, #{$flyValue}, #{rem($startSize)});

	// Если значения отрицательные
	@if ($minSize > $startSize) {
		$propertyValue: clamp(#{rem($startSize)}, #{$flyValue}, #{rem($minSize)});
	}

	// Поддержка clamp()
	@supports (#{$property}: $propertyValue) {
		#{$property}: #{$propertyValue};
	}

	// Fallback через calc
	@supports not (#{$property}: $propertyValue) {
		#{$property}: calc(
			#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) /
				#{math.div($widthFrom, 16) - math.div($widthTo, 16)}
		);
	}

	// Ограничения по min/max
	@if $widthFrom !=$containerWidth and $widthFrom !=$maxWidth and $keepSize !=1 and $keepSize !=2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: inherit;
		}
	}

	@if $widthTo !=$minWidth and $keepSize !=1 and $keepSize !=3 {
		@media (max-width: $widthToMedia) {
			#{$property}: inherit;
		}
	}
}

// =============================================  ОТСУПЫ ПО ДИЗАЙНЕРСКОМУ ШАГУ =============================================
// ui step --------------------------------
// дизайнеры задают размеры на основе системы шагов
$ui-step: 4px;

@mixin ui-space($direction, $size) {
	@if ($direction ==top) {
		margin-top: $ui-step * $size;
	}

	@if ($direction ==bottom) {
		margin-bottom: $ui-step * $size;
	}

	@if ($direction ==left) {
		margin-left: $ui-step * $size;
	}

	@if ($direction ==right) {
		margin-right: $ui-step * $size;
	}
}

// .element {
// 	// это отступ в 8 пикселей сверзу
// 	@include ui-space(top, 2);

// 	// это 40 px (миксин-множитель)
// 	height: $ui-step * 10;
// }
// ============================================= ПРОЗРАЧНОСТЬ ЭЛЕМЕНТА =============================================
@mixin ui-opacity($value) {
	$opacity-step: 1 / 10; // Локальная переменная $opacity-step	// $opacity-step: 0.1;

	opacity: $value * $opacity-step;
}

// .my-element {
// 	@include ui-opacity(5);	Это применит opacity в 0.5 (5 * 0.1) к элементу с классом .my-element.
// }
